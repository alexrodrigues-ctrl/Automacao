Criação de sistema de vendas, usando IDE Visual Studio liguagem C#, Banco de Dados; sql server 2014. Será em 3 camadas,
CamadaApresentação,
CamadaDados,
CamadaNegocio.

1)Criando um projeto na IDE chamado AutomaComercial (pode dá o nome q quiser)
2)Criando as CLASSES: CamadaApresentação, CamadaDados, CamadaNegocio.
3)Criando as referencias entre as camadas, p/ usar as funcoes umas das outras, (CamadaNegocio, ref com CamadaDados. CamadaApresentacao ref com CamadaNegocio )

na IDE, por enquanto é só, vamos por SQL Server 2014

4)Vamos agora preparar banco de dados: (Definir Tabelas/Modelagem/Chave Primaria/chave estrangera).
A intenção é usar o BD p/ tratar as consulta no BD, e nao fazer as consulta pelo C#.
Conexao no Banco de Dados, criar as query no SQL, e apenas chamar pelo C# //fazer um procedimento: buscar, inserir, apagar e editar.
////////////////////////////////////////////////
*Banco de Dados BD:
nome banco de dado: dbcomercio
usuario: sa
senha: definida pelo usuario
 5) crie um banco de dado e escolha um nome: por ex.: dbcomercio
 6) Crie uma nova consulta (New Query) CRIAR TABELA DE CATEGORIA:

//já na tela da query
--para utilizar o banco de dados dbcomercio o use o camando abaixo: isso faz ativa o BD que vamos usar.
use dbcomercio

--criando procedimento (procedure) mostar
create proc spmostrar_categoria
as
select top 200 *from categoria
order by idcategoria desc
go

--procedimento buscar nome
create proc spbuscar_nome
@textobuscar varchar(50)
as select * from categoria
where nome like @textobuscar + '%'
go

--procedimento inserir na categoria: o variavel @idcategoria, será usado no speditar_categoria, p/ ser setado no idcategoria
create proc spinserir_categoria
@idcategoria int output,
@nome varchar(50) ,
@descricao varchar(100)
as
insert into categoria (nome, descricao)
values (@nome, @descricao)
go 

--procedimento editar a categoria: neste caso vou setar no idcategoria as edições feitas (nome=@nome, descricao=@descricao 'onde' idcategoria=@idcategoria)
create proc speditar_categoria
@idcategoria int,
@nome varchar(50) ,
@descricao varchar(100)
as
update categoria set
 nome=@nome,
 descricao=@descricao where
 idcategoria=@idcategoria
 go

 --procedimento deletar
 create proc spdeletar_categoria
 @idcategoria int
 as
 delete from categoria where
 idcategoria=@idcategoria
 go

 //fim query.
 Voltando para IDE Visual Studio 2019.

 Uma vez o BD todo pronto, vamos pra IDE devenvolver os código em C# para chamar o BD.

 Abra a IDE Visual Studio e abra o projeto, dei o nome: AutomaComercial

 PS.: OS algoritmo estao todos pronto e comentados nas classe e projetos, é só clonar/baixar e seguir.
 Se tiver alguma dificuldades é só me acionar pelo email: alex.zatec@gmail.com
 Farei o acompanhamento sem qualquer problema, isso fará com que meu desenvolminto se aprimore. Não desista!

 7) No projeto dentro da CamadaDados, vamos criar uma classe chamada 'DCategoria' - class DCategoria //Classe Dados da Categoria
 nessa classe 'DCategoria' vamos criar as propriedade p/ obter e setar os campos. 

 PS.: OS algoritmo estao todos pronto e comentados nas classe e projetos, é só clonar/baixar e seguir.

11/06/2020 
na classe DCategoria vamos continua criando os construtores, um vazio q ser generico p/ todas as classes, e outro com parametros do tipo 'int DCategoria Categoria'
p/ reacionar os campos das propriedades com o banco de dados, usando o this.
//cria metodos 'inserir, editar, busca, mostrar' p/ tratar e chamar quando for necessario.

continuando 11/06/2020
-preparando os méodos p/ acessar o dados, lembrando de fazer tramanto de erros, try, catch, finally, veja classe DCategoria
-iniciar paramentos p/ insercao.

12/06/2020 -parte1
//terminado de codificar no C# a chamada via a procedures e conexao do banco de dados na CamadaDados nos metodos() inserir, editar, excluir, mostrar  e buscarnome.
-assim terminei de preparar minha CamadaDados na classe 'DCategoria'.
-agora vamos trabalhar na CamadaNegocio: a CamadaNegocio é referenciada a CamadaDados, para se comunicarem entre si,
-na CamadaNegocio, vamos cria uma camada NCategoria p/ cria os metodos onde vamos criar os obejos p/ inserir, editar, excluir etc.
>> ASSIM fizemos a CamadaNegocio e CamadaDados, agora vamos p/ CamadaApresentacao.

12/06/2020-parte2
//agora vamos trabalhar na CamadaApresentacao: assim se faz o conceito de 3 camadas; 1CamadaDados interliga com a 2CamadaNegocio que interliga com a 3CamadaApresentacao.
-podemos assim, nas camadas ligar o Banco de Dados com o C#, e o inverso tb, ligando o C# com o BD.
-é na CamadaApresentacao que vamos criar as telas, a interface com o usúario.
-criamos um Form chamado frmCategoria em CamadaApresentacao. No frmCategoria crias as telas p/ poder envia e receber do BD...
-No formulário frmCategoria foi criado um tabcontrol com duas abas 'Listar' e 'Configurações' em lista será exibi, em configuracoes sera modificado os dados.
-clonando o projeto terá as tela a disposição. Uso a IDE Visual Studio 2019.

13/06/2020 -parte1: 
-no Formulario Form1 Em frmCategoria na sua TELA de [Design] duplo clique p/ acessa seus código onde fica (frmcategoria_Load)  referenci a CamadaNegocio com o formcategoria e adiciona o using CamadaNegocio;pq vamos usar muitas funcoes q tá no CamadaNegocio 
- Logo abaixo/dentro da classe: public partial class frmcategoria : Form ---> crie as variaveis p/ poder diferenciar quando estamos criando um novo ou apenas editando: 
private bool eNovo = false;  private bool eEditar = false;

//vamos tratar de informacoes ao usuario, usando errorProvider e toolTip no formulario Controle de Categoria (frmcategoria), apenas p/ indicar ao usuario cada textbox o q se espera.
-errorProvider, vai mostrar o icone de erro,
-toolTip, vai mostrar a mensagem que vou definir no campo a ser preenchido. na propriedade deve coloca com true a opcao Isballoon, p/ q o balao de mensagem seja exibida.

onde?
dentro do metodo já existente:
public frmcategoria()
        {
            InitializeComponent();
            >>aqui
            this.ttMensagem.SetToolTip(this.txtNomeCotegoria, "Insira o Nome da Categoria.");
            this.ttMensagem.SetToolTip(this.txtIdCategoria, "Insira o Código da Categoria.");
            this.ttMensagem.SetToolTip(this.txtDescricacaoCategoria, "Insira a descrição da Categoria.");
        }
Agora:

-vamos criar um metodo p/ chamar umas mensagem de quando salvou, editou com sucesso e outra pra avisar se deu erro ao salvar/editar.
-vamos criar um metodo p/ limpar os campos sempre que preenchemos e finalizar.
IMPORTANTE: pq criar os MÉTODOS? Pq ao invéis de todas vez que usar uma determida tarefa e criar uma mensagem avisando se deu certo ou errado por exemplo;
apenas chamamos o metodo e o metodo já ta criado pra fazer isso quantas vezes for preciso.

-vamos criar um metodo p/ habilitar/desabilitar os campos (textbox), ou seja, se é possivel ou nao digitar naquela altura. se eu quiser deletar nao vai possivel eu digitar nos campos
-vamos criar um metodo p/ habilitar/desabilitar os botoes, pq se eu for criar um novo, o editar nao pode tá habilitado, por ex.:
ATENÇÃO: nas regras de condições: tá tudo comentado no código.

-vamos criar um metodo p/ ocultar colunas indesejaveis na grid, ou seja, na tabela. pra quê mostrar a coloulna código e deletar? vamos oculta-la. e pode ser ocultada qualquer uma, serve como estudo
---
13/06/2020 -parte2: continuando a criação dos metodos
-vamos criar um metodo p/ mostrar() e definir o que mostra na tabela (DataGridCategoria),  total de registro usando uma label, e ocultar as colunas nao necessario, ja usando o metodo ocultar já criado.  

Agora vamos carregar a Tabela no formulario, quando a tela for aberta:

-Dentro do evento LOAD:
private void frmcategoria_Load(object sender, EventArgs e)
        {
            >>aqui
        }
-vamos posicionar,
-vamos chamar os metodos criados,

        